import { forwardRef, Inject, Injectable } from "@nestjs/common";
import { Context, Telegraf, Markup, session, Scenes } from "telegraf";
import { UsersService } from "../users/users.service";
import { ClientsService } from "../clients/clients.service";
import { ProductItemsService } from "../product-items/product-items.service";
import { CitiesService } from "../cities/cities.service";
import { ProductItems } from "../product-items/product-item.entity/product-item.entity";
import { MyWebSocketGateway } from "../core/websocket.gateway";

// export interface MyContext extends Context {
//   scene: Scenes.SceneContextScene<MyContext>;
// }

export interface MyContext extends Scenes.SceneContext {}
@Injectable()
export class TelegramService {
  constructor(
    @Inject(forwardRef(() => ProductItemsService))
    private readonly productService: ProductItemsService,
    private readonly clientService: ClientsService,
    private readonly cityService: CitiesService,
    private readonly webSocketGateway: MyWebSocketGateway
  ) {
    this.bot = new Telegraf('6636125148:AAFp6741W-FJd15CQ2M0cpfbLVSs6z3u0V0');

    const registerContactScene = new Scenes.BaseScene<any>('registerContact');

    registerContactScene.enter(async (ctx) => {
      console.log('ccc', ctx.message.text)
      const userId = ctx.from.id;
      const existingClient = await this.clientService.findByChatId(userId);

      if (existingClient) {
        ctx.session.clientId = existingClient.id;
        ctx.reply('–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–ª–µ–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É:');
        // await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫–æ–º', Markup.keyboard([
        //   [{ text: "List Orders", callback_data: "list_orders" }],
        //   [{ text: "Enter New Order", callback_data: "enter_new_order" }]
        // ]).resize());

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ', Markup.keyboard([
          ["–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "–°–ø–∏—Å–æ–∫ –ó–∞–∫–∞–∑–æ–≤"],
          ["‚ò∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
          ["‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å", "üë• –ü–æ–¥–µ–ª–∏—Ç—å—Å—è"],
        ]).oneTime().resize());
        // ctx.scene.enter('provideOrderId');

      } else {
        ctx.reply('' +
          '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n ' +
          '–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é Golden Gate Cargo. –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ—Å—ã–ª–æ–∫ –∏–∑ –ö–∏—Ç–∞—è.\n\n' +
          '–ù–∞—à –∞–¥—Ä–µ—Å –≤ –ö–∏—Ç–∞–µ:\n' +
          'ÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏ÇÈô∂ÁïåÂ≤≠70Ê†ã2ÂçïÂÖÉÂ∫óÈù¢‰øÑÁΩóÊñØÁâ©ÊµÅ, Â§©Èæô15899119986\n\n' +
          '–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –ö–∞—Ä–≥–æ, –ø—Ä–æ—Å–∏–º –í–∞—Å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –í–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üôÇ');

        ctx.reply('', Markup.keyboard([[{
          text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
          request_contact: true
        }]]).resize());
      }
    });

    this.bot.command('stop',  async (ctx: any) => {
      await ctx.reply('–ü–æ–∫–∞', Markup.keyboard([
        ["–ó–∞–ø—É—Å—Ç–∏—Ç—å"],
      ]).oneTime().resize());
    })

    // bot.hears("üîç Search", ctx => ctx.reply("Yay!"));


    // registerContactScene.action("stop", async (ctx: any) => {
    //   await ctx.scene.leave();
    //   await ctx.reply("You have stopped the conversation.");
    // });

    registerContactScene.on('text', async ctx => {
      if (ctx.message.text.trim() === '/start') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (ctx.message.text.trim() === '/stop') {
        await ctx.reply('–ü–æ–∫–∞', Markup.keyboard([
          ["–ó–∞–ø—É—Å—Ç–∏—Ç—å"],
        ]).oneTime().resize());
        return;
      }

      if (ctx.message.text.trim() === '–ó–∞–ø—É—Å—Ç–∏—Ç—å') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (ctx.message.text.trim() === 'üîç –ü–æ–∏—Å–∫') {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ', Markup.keyboard([
          ["–ù–∞–∑–∞–¥"],
        ]).oneTime().resize());
        return;
      }

      if (ctx.message.text.trim() === '–ù–∞–∑–∞–¥') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (ctx.message.text.trim() === '–°–ø–∏—Å–æ–∫ –ó–∞–∫–∞–∑–æ–≤') {
        // await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ', Markup.keyboard([
        //   ["–ù–∞–∑–∞–¥"],
        // ]).oneTime().resize());
        await ctx.scene.enter('orderListScene');
        return;
      }

      if (ctx.message.text.trim() === '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑') {
        await ctx.scene.enter('cityListSceneId');
        return;
      }

      // await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫–æ–º', Markup.keyboard([[{
      //   text: "Register",
      //   request_contact: true
      // }]]).resize());
    });

    const citySelectScene = new Scenes.BaseScene<any>('cityListSceneId');
    citySelectScene.enter(async ctx => {
      const chatId = ctx.message.chat.id;
      const cities = await this.cityService.findAll();
      const buttons = cities.map(city => Markup.button.callback(city.name, `city_${city.id}`));
      buttons.push(Markup.button.callback("–ù–∞–∑–∞–¥", "back"));
      const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 });
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥:', keyboard);
    });

    citySelectScene.on('text', async ctx => {
      if (ctx.message.text.trim() === '/start') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (ctx.message.text.trim() === '/stop') {
        await ctx.reply('–ü–æ–∫–∞', Markup.keyboard([
          ["–ó–∞–ø—É—Å—Ç–∏—Ç—å"],
        ]).oneTime().resize());
        return;
      }

      await ctx.scene.enter('cityListSceneId');
    });

    citySelectScene.action(/city_/, async (ctx: any) => {
      const cityId = ctx.callbackQuery.data.split('_')[1];
      ctx.session.cityId = cityId;
      await ctx.scene.enter('nameEnterSceneId');
    });

    citySelectScene.action(/back/, async (ctx: any) => {
      await ctx.scene.enter('registerContact');
    });

    const nameEnterScene = new Scenes.BaseScene<any>('nameEnterSceneId');
    nameEnterScene.enter(async ctx => ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–æ–¥–µ–∂–¥–∞, –º—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏, —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥—Ä.):'));

    nameEnterScene.on('text', async ctx => {
      const name = ctx.message.text;

      if (!name.length) {
        ctx.scene.enter('nameEnterSceneId');
        return;
      }

      if (name === '/start') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (name === '/stop') {
        await ctx.reply('–ü–æ–∫–∞', Markup.keyboard([
          ["–ó–∞–ø—É—Å—Ç–∏—Ç—å"],
        ]).oneTime().resize());
        return;
      }

      if (name === '–ù–∞–∑–∞–¥') {
        await ctx.scene.enter('registerContact');
        return;
      }

      ctx.session.name = name;

      ctx.scene.enter('provideOrderId');
    });

    const orderListScene = new Scenes.BaseScene<any>('orderListScene');
    orderListScene.enter(async ctx => {
      const chatId = ctx.message.chat.id;
      const user = await this.clientService.findByChatId(chatId);
      const list = await this.productService.findByChatId(user.chatId);
      if (!list.length) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç', Markup.inlineKeyboard([
          Markup.button.callback("–ù–∞–∑–∞–¥", "back")
        ]));
        return;
      }
      const buttons: any = list.map(orderNumber => Markup.button.callback(`${orderNumber.itemName} - ${orderNumber.itemCode}`, `order_${orderNumber.itemCode}`));
      buttons.push(Markup.button.callback("–ù–∞–∑–∞–¥", "back"));
      const keyboard = Markup.inlineKeyboard(buttons, { columns: 2 });
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑', keyboard)
    });

    orderListScene.on('text', async ctx => {
      if (ctx.message.text.trim() === '/start') {
        await ctx.scene.enter('registerContact');
        return;
      }

      if (ctx.message.text.trim() === '/stop') {
        await ctx.reply('–ü–æ–∫–∞', Markup.keyboard([
          ["–ó–∞–ø—É—Å—Ç–∏—Ç—å"],
        ]).oneTime().resize());
        return;
      }

      if (ctx.message.text.trim() === '–ù–∞–∑–∞–¥') {
        await ctx.scene.enter('registerContact');
        return;
      }
    });


    orderListScene.action(/order_/, async (ctx: any) => {
      const orderId = ctx.callbackQuery.data.split('_')[1];
      ctx.session.orderId = orderId;
      console.log('orderId', orderId);
      await ctx.scene.enter('status');
    });

    orderListScene.action(/back/, async (ctx: any) => {
      await ctx.scene.enter('registerContact');
      return;
    });

    registerContactScene.on('contact', async ctx => {
      const userId = ctx.from.id;
      const phoneNumber = ctx.message.contact.phone_number;
      const client = await this.clientService.createUser(userId, phoneNumber);
      ctx.session.clientId = client.id
      ctx.session.registered = true;

      await ctx.reply("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å üôå\n" +
        "–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–ª–µ–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É:");
      ctx.scene.enter('registerContact');
    });

    const provideOrderIdScene = new Scenes.BaseScene<any>('provideOrderId');
    provideOrderIdScene.enter(ctx => ctx.reply('–¢—Ä–µ–∫–æ–≤—ã–π –∫–æ–¥ –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:'));

    provideOrderIdScene.on('text', async ctx => {
      const orderId = ctx.message.text.trim();

      if (orderId === '/start') {
        await ctx.scene.enter('provideOrderId');
        return;
      }

      if (orderId === '/stop') {
        // await ctx.reply('Please share your contact by clicking the123123');
        return;
      }

      if (!this.isOrderId(orderId)) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç—Ä–µ–∫–æ–≤—ã–π –∫–æ–¥ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–∫–æ–≤—ã–π –∫–æ–¥ –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:");
        return;
      }

      const hasOrder = await this.productService.findByOrderCode(orderId);
      console.log('hasOrder', hasOrder)
      if (hasOrder) {
        await ctx.reply("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ");
        return;
      }

      ctx.session.orderId = orderId;
      ctx.session.chatId =  ctx.message.chat.id;
      await ctx.reply(`–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ ${orderId} –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
      await ctx.reply("–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑?", Markup.inlineKeyboard([
        Markup.button.callback("–î–∞", "confirm_yes"),
        Markup.button.callback("–ù–µ—Ç", "confirm_no"),
      ]));
    });

    const afterRegisterScene = new Scenes.BaseScene<any>('afterRegister');

    afterRegisterScene.enter(async (ctx) => {
      const userId = ctx.from.id;
      const chatId = ctx.message.chat.id;
      const existingClient = await this.clientService.findByChatId(chatId);

      ctx.reply('–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');

      if (existingClient) {
        ctx.session.clientId = existingClient.chatId;
        ctx.reply('–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
        ctx.scene.enter('provideOrderId');
      } else {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫–æ–º', Markup.keyboard([[{
          text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
          request_contact: true
        }]]).resize());
      }
    });


    provideOrderIdScene.action("confirm_yes", async (ctx: any) => {
      try {
        const orderId = ctx.session.orderId;
        const clientId = ctx.session.chatId;
        const cityId = ctx.session.cityId;
        const name = ctx.session.name;
        console.log('orderId', ctx.session.orderId)
        console.log('clientId', clientId);
        const new_order = await this.productService.create({itemCode: orderId, itemName: name, status: 0, client: clientId, city: cityId});
        this.webSocketGateway.broadcastNewOrder(new_order);
        await ctx.answerCbQuery("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö–æ–≥–¥–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–±—É–¥–µ—Ç –≤ –í–∞—à –≥–æ—Ä–æ–¥ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ. –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.");
        await ctx.scene.enter('status');
      } catch (error) {
        console.error('Error saving order:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ—Ä–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
      }
    });

    provideOrderIdScene.action("confirm_no", async (ctx: any) => {
      await ctx.answerCbQuery("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω");
      await ctx.scene.enter('provideOrderId');
    });

    provideOrderIdScene.leave((ctx) => {
      ctx.reply('–°–ø–∞—Å–∏–±–æ!');
    });

    const startProviderScene = new Scenes.BaseScene<any>('startScene');

    startProviderScene.enter(async ctx => {

      const orderId = ctx.session.orderId;

    });

    const statusProviderScene = new Scenes.BaseScene<any>('status');

    statusProviderScene.enter(async ctx => {
      const orderId = ctx.session.orderId;

      const orderStatus = await this.productService.findByOrderCode(orderId);
      let statusSymbol: string;

      if (orderStatus) {
        switch (orderStatus.status) {
          case 0:
            statusSymbol = "üü° –í–∞—à –∑–∞–∫–∞–∑ –≤ *–æ–∂–∏–¥–∞–Ω–∏–∏*";
            break;
          case 1:
            statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª *–ø—Ä–∏–Ω—è—Ç*! \n\n –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–π 2x-–Ω–µ–¥–µ–ª—å";
            break;
          case 2:
            statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ *–ø—Ä–∏–±—ã–ª*";
            break;
          case 3:
            statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ *–≤—ã–¥–∞–Ω*";
            break;
          case 4:
            statusSymbol = "üî¥ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª *–æ—Ç–º–µ–Ω–µ–Ω*";
            break;
          default:
            statusSymbol = "‚ùì";
        }
        await ctx.replyWithMarkdown(`–í–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${statusSymbol}`, Markup.keyboard([
          ["–ù–∞–∑–∞–¥"],
        ]).oneTime().resize());
        // ctx.scene.enter('orderListScene');
      } else {
        await ctx.reply('Failed to retrieve order status.');
      }
    });

    statusProviderScene.on('text', async ctx => {
      const message = ctx.message.text.trim();
      if (message === '/start') {
        await ctx.scene.enter('provideOrderId');
        return;
      }

      if (ctx.message.text.trim() === '–ù–∞–∑–∞–¥') {
        await ctx.scene.enter('registerContact');
        return;
      }

      // const orderId = ctx.message.text;
      // // Assume isOrderId() function is defined elsewhere
      // if (!this.isOrderId(orderId)) {
      //   await ctx.reply("Invalid order ID. Please provide a valid order ID.");
      //   return;
      // }

      // ctx.session.orderId = orderId;
      // await ctx.reply(`Thank you! Your order ID ${orderId} has been saved.`);
      // await ctx.reply("Would you like to confirm your order?", Markup.inlineKeyboard([
      //   Markup.button.callback("Yes", "confirm_yes"),
      //   Markup.button.callback("No", "confirm_no"),
      // ]));
    });

    this.scene = new Scenes.Stage<any>([registerContactScene, provideOrderIdScene, statusProviderScene, orderListScene, citySelectScene, nameEnterScene]);

    this.bot.use(session());
    this.bot.use(this.scene.middleware());

    this.bot.command('start', async (ctx: any) => {
      console.log('ctx', ctx.message.text)
      if (ctx.message.text.trim() === '/start' || ctx.message.text.trim() === '–ó–∞–ø—É—Å—Ç–∏—Ç—å') {
        await ctx.scene.enter('registerContact');
        return;
      }
      // ctx.scenes.enter(registerContactScene);
    });

    this.bot.on('text', async (ctx: any) => {
      if (ctx.message.text.trim() === '/start' || ctx.message.text.trim() === '–ó–∞–ø—É—Å—Ç–∏—Ç—å') {
        await ctx.scene.enter('registerContact');
        return;
      }
      if (ctx.message.text.trim() === '/stop') {
        await ctx.scene.leave();
        await ctx.scene.enter('registerContact');
        return;
      }
    });

    // this.bot.command('stop', async (ctx: any) => {
    //   console.log('stop', ctx);
    //   await ctx.scene.leave();
    // });

    // this.bot.launch().then(() => {
    //   console.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.');
    // }).catch((err) => {
    //   console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', err)
    // });


  }
  private readonly bot: Telegraf<Context>;

  private scene: Scenes.Stage<MyContext>;

  // async onApplicationShutdown(signal?: string) {
  //   console.log(`Shutting down Telegram bot due to ${signal} signal...`);
  //   await this.bot.stop();
  //   console.log('Telegram bot stopped.');
  // }

  isOrderId(text: string): boolean {
    return /^[\w\d]{12,20}$/i.test(text);
  }

  // private setupScenes() {new Scenes.Stage<any>([registerContactScene, provideOrderIdScene])
  //   const stepHandler = new Scenes.Stage<any>(
  //     'stepHandler',
  //     async (ctx: Context) => {
  //       await ctx.reply('Step 1. What is your name?');
  //       ctx.scene.next();
  //     },
  //     async (ctx: Context) => {
  //       await ctx.reply(`Step 2. Hello, ${ctx.message.text}!`);
  //       ctx.scene.leave();
  //     },
  //   );

  async start() {
    await this.bot.launch();
  }

  async sendNotification(product: ProductItems): Promise<void> {
    let statusSymbol: string;
    switch (product.status) {
      case 0:
        statusSymbol = "üü° –í–∞—à –∑–∞–∫–∞–∑ –≤ *–æ–∂–∏–¥–∞–Ω–∏–∏*";
        break;
      case 1:
        statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª *–ø—Ä–∏–Ω—è—Ç*! \n\n –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–π 2x-–Ω–µ–¥–µ–ª—å";
        break;
      case 2:
        statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ *–ø—Ä–∏–±—ã–ª*";
        break;
      case 3:
        statusSymbol = "üü¢ –í–∞—à –∑–∞–∫–∞–∑ *–≤—ã–¥–∞–Ω*";
        break;
      case 4:
        statusSymbol = "üî¥ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª *–æ—Ç–º–µ–Ω–µ–Ω*";
        break;
      default:
        statusSymbol = "‚ùì";
    }
    const message = `
    –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *${product.itemCode}*-*${product.itemName}*\n\n 
    –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${statusSymbol}\n\n 
    –¶–µ–Ω–∞: *${product.costPerUnit}*\n\n 
    –í–µ—Å: *${product.itemWeight}*
    `;
    await this.bot.telegram.sendMessage(product.client.chatId, message, { parse_mode: 'Markdown' });
  }

  // async stopBot() {
  //   await this.onApplicationShutdown();
  // }

  private async registerUser(ctx) {
    const chatId = ctx.message.chat.id; // Extract chat ID from the message
    const username = ctx.message.from.username; // Extract username from the message (if available)

    try {
      const existingUser = await this.clientService.findByChatId(chatId);
      if (existingUser) {
        await ctx.scene.enter('status');
        // ctx.reply('You are already registered!');
        // return;
      }
      const newUser = await this.clientService.createUser(chatId, username);
      ctx.reply('–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
      return true;
    } catch (error) {
      console.error('Error registering user:', error);
      ctx.reply('Failed to register. Please try again later.');
      return false;
    }
  }

}
